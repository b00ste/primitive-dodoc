{
  "methods": {},
  "events": {},
  "errors": {},
  "internalMethods": {
    "isContract(address)": {
      "code": "function isContract(address account) internal view returns (bool)",
      "inputs": {},
      "outputs": {},
      "details": "Returns true if `account` is a contract.\n [IMPORTANT]\n ====\n It is unsafe to assume that an address for which this function returns\n false is an externally-owned account (EOA) and not a contract.\n Among others, `isContract` will return false for the following\n types of addresses:\n  - an externally-owned account\n  - a contract in construction\n  - an address where a contract will be created\n  - an address where a contract lived, but was destroyed\n Furthermore, `isContract` will also return true if the target contract within\n the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\n which only has an effect at the end of a transaction.\n ====\n [IMPORTANT]\n ====\n You shouldn't rely on `isContract` to protect against flash loan attacks!\n Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n constructor.\n ===="
    },
    "sendValue(address payable,uint256)": {
      "code": "function sendValue(address payable recipient, uint256 amount) internal nonpayable",
      "inputs": {},
      "outputs": {},
      "details": "Replacement for Solidity's `transfer`: sends `amount` wei to\n `recipient`, forwarding all available gas and reverting on errors.\n https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n of certain opcodes, possibly making contracts go over the 2300 gas limit\n imposed by `transfer`, making them unable to receive funds via\n `transfer`. {sendValue} removes this limitation.\n https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n IMPORTANT: because control is transferred to `recipient`, care must be\n taken to not create reentrancy vulnerabilities. Consider using\n {ReentrancyGuard} or the\n https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern]."
    },
    "functionCall(address,bytes)": {
      "code": "function functionCall(address target, bytes data) internal nonpayable returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Performs a Solidity function call using a low level `call`. A\n plain `call` is an unsafe replacement for a function call: use this\n function instead.\n If `target` reverts with a revert reason, it is bubbled up by this\n function (like regular Solidity function calls).\n Returns the raw returned data. To convert to the expected return value,\n use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n Requirements:\n - `target` must be a contract.\n - calling `target` with `data` must not revert.\n _Available since v3.1._"
    },
    "functionCall(address,bytes,string)": {
      "code": "function functionCall(address target, bytes data, string errorMessage) internal nonpayable returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
    },
    "functionCallWithValue(address,bytes,uint256)": {
      "code": "function functionCallWithValue(address target, bytes data, uint256 value) internal nonpayable returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but also transferring `value` wei to `target`.\n Requirements:\n - the calling contract must have an ETH balance of at least `value`.\n - the called Solidity function must be `payable`.\n _Available since v3.1._"
    },
    "functionCallWithValue(address,bytes,uint256,string)": {
      "code": "function functionCallWithValue(address target, bytes data, uint256 value, string errorMessage) internal nonpayable returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n with `errorMessage` as a fallback revert reason when `target` reverts.\n _Available since v3.1._"
    },
    "functionStaticCall(address,bytes)": {
      "code": "function functionStaticCall(address target, bytes data) internal view returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
    },
    "functionStaticCall(address,bytes,string)": {
      "code": "function functionStaticCall(address target, bytes data, string errorMessage) internal view returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a static call.\n _Available since v3.3._"
    },
    "functionDelegateCall(address,bytes)": {
      "code": "function functionDelegateCall(address target, bytes data) internal nonpayable returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
    },
    "functionDelegateCall(address,bytes,string)": {
      "code": "function functionDelegateCall(address target, bytes data, string errorMessage) internal nonpayable returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n but performing a delegate call.\n _Available since v3.4._"
    },
    "verifyCallResultFromTarget(address,bool,bytes,string)": {
      "code": "function verifyCallResultFromTarget(address target, bool success, bytes returndata, string errorMessage) internal view returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n _Available since v4.8._"
    },
    "verifyCallResult(bool,bytes,string)": {
      "code": "function verifyCallResult(bool success, bytes returndata, string errorMessage) internal pure returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n revert reason or using the provided one.\n _Available since v4.3._"
    }
  },
  "path": "@openzeppelin/contracts/utils",
  "details": "Collection of functions related to the address type",
  "name": "Address"
}
