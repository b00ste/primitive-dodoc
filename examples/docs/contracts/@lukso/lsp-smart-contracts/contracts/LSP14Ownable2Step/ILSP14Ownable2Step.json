{
  "methods": {
    "acceptOwnership()": {
      "stateMutability": "nonpayable",
      "code": "function acceptOwnership() external nonpayable",
      "inputs": {},
      "outputs": {},
      "notice": "`msg.sender` is accepting ownership of contract: `address(this)`.",
      "details": "Transfer ownership of the contract from the current {owner()} to the {pendingOwner()}. Once this function is called: - The current {owner()} will lose access to the functions restricted to the {owner()} only. - The {pendingOwner()} will gain access to the functions restricted to the {owner()} only."
    },
    "pendingOwner()": {
      "stateMutability": "view",
      "code": "function pendingOwner() external view returns (address)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "address"
        }
      },
      "details": "The address that ownership of the contract is transferred to. This address may use {acceptOwnership()} to gain ownership of the contract."
    },
    "renounceOwnership()": {
      "stateMutability": "nonpayable",
      "code": "function renounceOwnership() external nonpayable",
      "inputs": {},
      "outputs": {},
      "notice": "`msg.sender` is renouncing ownership of contract `address(this)`.",
      "details": "Renounce ownership of the contract in a 2-step process. 1. The first call will initiate the process of renouncing ownership. 2. The second call is used as a confirmation and will leave the contract without an owner."
    },
    "transferOwnership(address)": {
      "stateMutability": "nonpayable",
      "code": "function transferOwnership(address newOwner) external nonpayable",
      "inputs": {
        "newOwner": {
          "type": "address",
          "description": "The address of the new owner."
        }
      },
      "outputs": {},
      "notice": "Transfer ownership initiated by `newOwner`.",
      "details": "Initiate the process of transferring ownership of the contract by setting the new owner as the pending owner. If the new owner is a contract that supports + implements LSP1, this will also attempt to notify the new owner that ownership has been transferred to them by calling the {universalReceiver()} function on the `newOwner` contract."
    }
  },
  "events": {
    "OwnershipRenounced()": {
      "code": "event OwnershipRenounced()",
      "inputs": {},
      "notice": "Successfully renounced ownership of the contract. This contract is now owned by anyone, it's owner is `address(0)`.",
      "details": "Emitted when the ownership of the contract has been renounced."
    },
    "OwnershipTransferStarted(address,address)": {
      "code": "event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner)",
      "inputs": {
        "previousOwner": {
          "type": "address",
          "indexed": true,
          "description": "The address of the previous owner."
        },
        "newOwner": {
          "type": "address",
          "indexed": true,
          "description": "The address of the new owner."
        }
      },
      "notice": "The transfer of ownership of the contract was initiated. Pending new owner set to: `newOwner`.",
      "details": "Emitted when {transferOwnership(..)} was called and the first step of transferring ownership completed successfully which leads to {pendingOwner} being updated."
    },
    "RenounceOwnershipStarted()": {
      "code": "event RenounceOwnershipStarted()",
      "inputs": {},
      "notice": "Ownership renouncement initiated.",
      "details": "Emitted when starting the {renounceOwnership(..)} 2-step process."
    }
  },
  "errors": {},
  "internalMethods": {},
  "path": "@lukso/lsp-smart-contracts/contracts/LSP14Ownable2Step",
  "title": "Interface of the LSP14 - Ownable 2-step standard, an extension of the [EIP173] (Ownable) standard with 2-step process to transfer or renounce ownership.",
  "name": "ILSP14Ownable2Step"
}
