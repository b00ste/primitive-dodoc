{
  "methods": {
    "supportsInterface(bytes4)": {
      "stateMutability": "view",
      "code": "function supportsInterface(bytes4 interfaceId) external view returns (bool)",
      "inputs": {
        "interfaceId": {
          "type": "bytes4"
        }
      },
      "outputs": {
        "_0": {
          "type": "bool"
        }
      },
      "details": "See {IERC165-supportsInterface}."
    }
  },
  "events": {},
  "errors": {},
  "internalMethods": {
    "_supportsInterfaceInERC165Extension(bytes4)": {
      "code": "function _supportsInterfaceInERC165Extension(bytes4 interfaceId) internal view returns (bool)",
      "inputs": {},
      "outputs": {},
      "details": "Returns whether the interfaceId being checked is supported in the extension of the\n {supportsInterface} selector.\n To be used by extendable contracts wishing to extend the ERC165 interfaceIds originally\n supported by reading whether the interfaceId queried is supported in the `supportsInterface`\n extension if the extension is set, if not it returns false."
    },
    "_getExtensionAndForwardValue(bytes4)": {
      "code": "function _getExtensionAndForwardValue(bytes4 functionSelector) internal view returns (address, bool)",
      "inputs": {},
      "outputs": {},
      "details": "Returns the extension mapped to a specific function selector\n If no extension was found, return the address(0)\n To be overrided.\n Up to the implementor contract to return an extension based on a function selector"
    },
    "_fallbackLSP17Extendable(bytes)": {
      "code": "function _fallbackLSP17Extendable(bytes callData) internal nonpayable returns (bytes)",
      "inputs": {},
      "outputs": {},
      "details": "Forwards the call to an extension mapped to a function selector.\n Calls {_getExtensionAndForwardValue} to get the address of the extension mapped to the function selector being\n called on the account. If there is no extension, the `address(0)` will be returned.\n Forwards the value if the extension is payable.\n Reverts if there is no extension for the function being called.\n If there is an extension for the function selector being called, it calls the extension with the\n `CALL` opcode, passing the `msg.data` appended with the 20 bytes of the {msg.sender} and 32 bytes of the `msg.value`.",
      "custom:hint": "This function does not forward to the extension contract the `msg.value` received by the contract that inherits `LSP17Extendable`.\n If you would like to forward the `msg.value` to the extension contract, you can override the code of this internal function as follow:\n ```solidity\n (bool success, bytes memory result) = extension.call{value: msg.value}(\n     abi.encodePacked(callData, msg.sender, msg.value)\n );\n ```"
    }
  },
  "path": "@lukso/lsp-smart-contracts/contracts/LSP17ContractExtension",
  "title": "Module to add more functionalities to a contract using extensions.",
  "details": "Implementation of the `fallback(...)` logic according to LSP17 - Contract Extension standard. This module can be inherited to extend the functionality of the parent contract when calling a function that doesn't exist on the parent contract via forwarding the call to an extension mapped to the function selector being called, set originally by the parent contract",
  "name": "LSP17Extendable"
}
