{
  "methods": {
    "getData(bytes32)": {
      "stateMutability": "view",
      "code": "function getData(bytes32 dataKey) external view returns (bytes dataValue)",
      "inputs": {
        "dataKey": {
          "type": "bytes32",
          "description": "The data key for which to retrieve the value."
        }
      },
      "outputs": {
        "dataValue": {
          "type": "bytes",
          "description": "The bytes value stored under the specified data key."
        }
      },
      "notice": "Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.",
      "details": "Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`."
    },
    "getDataBatch(bytes32[])": {
      "stateMutability": "view",
      "code": "function getDataBatch(bytes32[] dataKeys) external view returns (bytes[] dataValues)",
      "inputs": {
        "dataKeys": {
          "type": "bytes32[]",
          "description": "The array of keys which values to retrieve"
        }
      },
      "outputs": {
        "dataValues": {
          "type": "bytes[]",
          "description": "The array of data stored at multiple keys"
        }
      },
      "notice": "Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.",
      "details": "Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`."
    },
    "setData(bytes32,bytes)": {
      "stateMutability": "payable",
      "code": "function setData(bytes32 dataKey, bytes dataValue) external payable",
      "inputs": {
        "dataKey": {
          "type": "bytes32",
          "description": "The data key for which to set a new value."
        },
        "dataValue": {
          "type": "bytes",
          "description": "The new bytes value to set."
        }
      },
      "outputs": {},
      "notice": "Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.",
      "details": "Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data."
    },
    "setDataBatch(bytes32[],bytes[])": {
      "stateMutability": "payable",
      "code": "function setDataBatch(bytes32[] dataKeys, bytes[] dataValues) external payable",
      "inputs": {
        "dataKeys": {
          "type": "bytes32[]",
          "description": "An array of data keys to set bytes values for."
        },
        "dataValues": {
          "type": "bytes[]",
          "description": "An array of bytes values to set for each `dataKeys`."
        }
      },
      "outputs": {},
      "notice": "Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.",
      "details": "Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction."
    },
    "supportsInterface(bytes4)": {
      "stateMutability": "view",
      "code": "function supportsInterface(bytes4 interfaceId) external view returns (bool)",
      "inputs": {
        "interfaceId": {
          "type": "bytes4"
        }
      },
      "outputs": {
        "_0": {
          "type": "bool"
        }
      },
      "details": "Returns true if this contract implements the interface defined by `interfaceId`. See the corresponding https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section] to learn more about how these ids are created. This function call must use less than 30 000 gas."
    }
  },
  "events": {
    "DataChanged(bytes32,bytes)": {
      "code": "event DataChanged(bytes32 indexed dataKey, bytes dataValue)",
      "inputs": {
        "dataKey": {
          "type": "bytes32",
          "indexed": true,
          "description": "The data key for which a bytes value is set."
        },
        "dataValue": {
          "type": "bytes",
          "indexed": false,
          "description": "The value to set for the given data key."
        }
      },
      "notice": "The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.",
      "details": "Emitted when data at a specific `dataKey` was changed to a new value `dataValue`."
    }
  },
  "errors": {},
  "internalMethods": {},
  "path": "@erc725/smart-contracts/contracts/interfaces",
  "title": "The interface for ERC725Y sub-standard, a generic data key/value store.",
  "details": "ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.",
  "name": "IERC725Y"
}
