{
  "methods": {
    "getData(bytes32)": {
      "stateMutability": "view",
      "code": "function getData(bytes32 dataKey) external view returns (bytes dataValue)",
      "inputs": {
        "dataKey": {
          "type": "bytes32",
          "description": "The data key for which to retrieve the value."
        }
      },
      "outputs": {
        "dataValue": {
          "type": "bytes",
          "description": "The bytes value stored under the specified data key."
        }
      },
      "notice": "Reading the ERC725Y storage for data key `dataKey` returned the following value: `dataValue`.",
      "details": "Get in the ERC725Y storage the bytes data stored at a specific data key `dataKey`."
    },
    "getDataBatch(bytes32[])": {
      "stateMutability": "view",
      "code": "function getDataBatch(bytes32[] dataKeys) external view returns (bytes[] dataValues)",
      "inputs": {
        "dataKeys": {
          "type": "bytes32[]",
          "description": "The array of keys which values to retrieve"
        }
      },
      "outputs": {
        "dataValues": {
          "type": "bytes[]",
          "description": "The array of data stored at multiple keys"
        }
      },
      "notice": "Reading the ERC725Y storage for data keys `dataKeys` returned the following values: `dataValues`.",
      "details": "Get in the ERC725Y storage the bytes data stored at multiple data keys `dataKeys`."
    },
    "owner()": {
      "stateMutability": "view",
      "code": "function owner() external view returns (address)",
      "inputs": {},
      "outputs": {
        "_0": {
          "type": "address"
        }
      },
      "details": "Returns the address of the current owner."
    },
    "renounceOwnership()": {
      "stateMutability": "nonpayable",
      "code": "function renounceOwnership() external nonpayable",
      "inputs": {},
      "outputs": {},
      "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
    },
    "setData(bytes32,bytes)": {
      "stateMutability": "payable",
      "code": "function setData(bytes32 dataKey, bytes dataValue) external payable",
      "inputs": {
        "dataKey": {
          "type": "bytes32",
          "description": "The data key for which to set a new value."
        },
        "dataValue": {
          "type": "bytes",
          "description": "The new bytes value to set."
        }
      },
      "outputs": {},
      "notice": "Setting the following data key value pair in the ERC725Y storage. Data key: `dataKey`, data value: `dataValue`.",
      "details": "Sets a single bytes value `dataValue` in the ERC725Y storage for a specific data key `dataKey`. The function is marked as payable to enable flexibility on child contracts. For instance to implement a fee mechanism for setting specific data.",
      "custom:events": "{DataChanged} event.",
      "custom:requirements": "- SHOULD only be callable by the {owner}.",
      "custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**."
    },
    "setDataBatch(bytes32[],bytes[])": {
      "stateMutability": "payable",
      "code": "function setDataBatch(bytes32[] dataKeys, bytes[] dataValues) external payable",
      "inputs": {
        "dataKeys": {
          "type": "bytes32[]",
          "description": "An array of data keys to set bytes values for."
        },
        "dataValues": {
          "type": "bytes[]",
          "description": "An array of bytes values to set for each `dataKeys`."
        }
      },
      "outputs": {},
      "notice": "Setting the following data key value pairs in the ERC725Y storage. Data keys: `dataKeys`, data values: `dataValues`.",
      "details": "Batch data setting function that behaves the same as {setData} but allowing to set multiple data key/value pairs in the ERC725Y storage in the same transaction.",
      "custom:events": "{DataChanged} event **for each data key/value pair set**.",
      "custom:requirements": "- SHOULD only be callable by the {owner} of the contract.",
      "custom:warning": "**Note for developers:** despite the fact that this function is set as `payable`, if the function is not intended to receive value (= native tokens), **an additional check should be implemented to ensure that `msg.value` sent was equal to 0**."
    },
    "supportsInterface(bytes4)": {
      "stateMutability": "view",
      "code": "function supportsInterface(bytes4 interfaceId) external view returns (bool)",
      "inputs": {
        "interfaceId": {
          "type": "bytes4"
        }
      },
      "outputs": {
        "_0": {
          "type": "bool"
        }
      },
      "details": "See {IERC165-supportsInterface}."
    },
    "transferOwnership(address)": {
      "stateMutability": "nonpayable",
      "code": "function transferOwnership(address newOwner) external nonpayable",
      "inputs": {
        "newOwner": {
          "type": "address"
        }
      },
      "outputs": {},
      "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
    }
  },
  "events": {
    "DataChanged(bytes32,bytes)": {
      "code": "event DataChanged(bytes32 indexed dataKey, bytes dataValue)",
      "inputs": {
        "dataKey": {
          "type": "bytes32",
          "indexed": true,
          "description": "The data key for which a bytes value is set."
        },
        "dataValue": {
          "type": "bytes",
          "indexed": false,
          "description": "The value to set for the given data key."
        }
      },
      "notice": "The following data key/value pair has been changed in the ERC725Y storage: Data key: `dataKey`, data value: `dataValue`.",
      "details": "Emitted when data at a specific `dataKey` was changed to a new value `dataValue`."
    },
    "OwnershipTransferred(address,address)": {
      "code": "event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)",
      "inputs": {
        "previousOwner": {
          "type": "address",
          "indexed": true
        },
        "newOwner": {
          "type": "address",
          "indexed": true
        }
      }
    }
  },
  "errors": {
    "ERC725Y_DataKeysValuesEmptyArray()": {
      "code": "error ERC725Y_DataKeysValuesEmptyArray()",
      "inputs": {},
      "details": "Reverts when one of the array parameter provided to {setDataBatch} function is an empty array."
    },
    "ERC725Y_DataKeysValuesLengthMismatch()": {
      "code": "error ERC725Y_DataKeysValuesLengthMismatch()",
      "inputs": {},
      "details": "Reverts when there is not the same number of elements in the `datakeys` and `dataValues` array parameters provided when calling the {setDataBatch} function."
    },
    "ERC725Y_MsgValueDisallowed()": {
      "code": "error ERC725Y_MsgValueDisallowed()",
      "inputs": {},
      "details": "Reverts when sending value to the {setData} or {setDataBatch} function."
    },
    "OwnableCallerNotTheOwner(address)": {
      "code": "error OwnableCallerNotTheOwner(address callerAddress)",
      "inputs": {
        "callerAddress": {
          "type": "address",
          "description": "The address that tried to make the call."
        }
      },
      "details": "Reverts when only the owner is allowed to call the function."
    },
    "OwnableCannotSetZeroAddressAsOwner()": {
      "code": "error OwnableCannotSetZeroAddressAsOwner()",
      "inputs": {},
      "details": "Reverts when trying to set `address(0)` as the contract owner when deploying the contract, initializing it or transferring ownership of the contract."
    }
  },
  "internalMethods": {
    "_checkOwner()": {
      "code": "function _checkOwner() internal view",
      "inputs": {},
      "outputs": {},
      "details": "Throws if the sender is not the owner."
    },
    "_setOwner(address)": {
      "code": "function _setOwner(address newOwner) internal nonpayable",
      "inputs": {},
      "outputs": {},
      "details": "Changes the owner if `newOwner` and oldOwner are different\n This pattern is useful in inheritance."
    },
    "_getData(bytes32)": {
      "code": "function _getData(bytes32 dataKey) internal view returns (bytes dataValue)",
      "inputs": {
        "dataKey": {
          "type": "bytes32",
          "description": "A bytes32 data key to read the associated `bytes` value from the store."
        }
      },
      "outputs": {
        "dataValue": {
          "type": "bytes",
          "description": "The `bytes` value associated with the given `dataKey` in the ERC725Y storage."
        }
      },
      "details": "Read the value stored under a specific `dataKey` inside the underlying ERC725Y storage,\n  represented as a mapping of `bytes32` data keys mapped to their `bytes` data values.\n ```solidity\n mapping(bytes32 => bytes) _store\n ```"
    },
    "_setData(bytes32,bytes)": {
      "code": "function _setData(bytes32 dataKey, bytes dataValue) internal nonpayable",
      "inputs": {
        "dataKey": {
          "type": "bytes32",
          "description": "A bytes32 data key to write the associated `bytes` value to the store."
        },
        "dataValue": {
          "type": "bytes",
          "description": "The `bytes` value to associate with the given `dataKey` in the ERC725Y storage."
        }
      },
      "outputs": {},
      "details": "Write a `dataValue` to the underlying ERC725Y storage, represented as a mapping of\n `bytes32` data keys mapped to their `bytes` data values.\n ```solidity\n mapping(bytes32 => bytes) _store\n ```",
      "custom:events": "{DataChanged} event emitted after a successful `setData` call."
    }
  },
  "path": "@erc725/smart-contracts/contracts",
  "title": "Core implementation of ERC725Y sub-standard, a general data key/value store.",
  "details": "ERC725Y provides the ability to set arbitrary data key/value pairs that can be changed over time. It is intended to standardise certain data key/value pairs to allow automated read and writes from/to the contract storage.",
  "author": "Fabian Vogelsteller <fabian@lukso.network>",
  "name": "ERC725YCore"
}
